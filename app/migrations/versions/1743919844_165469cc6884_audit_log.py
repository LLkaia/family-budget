"""audit log

Revision ID: 165469cc6884
Revises: 5afe071b6c71
Create Date: 2025-04-06 09:10:44.936193

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision: str = '165469cc6884'
down_revision: Union[str, None] = '5afe071b6c71'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('auditlog',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('table_name', sqlmodel.sql.sqltypes.AutoString(length=20), nullable=False),
    sa.Column('operation', sqlmodel.sql.sqltypes.AutoString(length=6), nullable=False),
    sa.Column('changed_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('record_id', sa.Integer(), nullable=True),
    sa.Column('old_data', sa.JSON(), nullable=True),
    sa.Column('new_data', sa.JSON(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )

    # create function which will run on trigger
    op.execute("""
    CREATE OR REPLACE FUNCTION log_transaction_changes()
    RETURNS TRIGGER AS $$
    BEGIN
        IF (TG_OP = 'INSERT') THEN
            INSERT INTO auditlog(table_name, operation, record_id, new_data)
            VALUES (TG_TABLE_NAME, TG_OP, NEW.id, to_jsonb(NEW));
            RETURN NEW;

        ELSIF (TG_OP = 'UPDATE') THEN
            INSERT INTO auditlog(table_name, operation, record_id, old_data, new_data)
            VALUES (TG_TABLE_NAME, TG_OP, NEW.id, to_jsonb(OLD), to_jsonb(NEW));
            RETURN NEW;

        ELSIF (TG_OP = 'DELETE') THEN
            INSERT INTO auditlog(table_name, operation, record_id, old_data)
            VALUES (TG_TABLE_NAME, TG_OP, OLD.id, to_jsonb(OLD));
            RETURN OLD;
        END IF;
        RETURN NULL;
    END;
    $$ LANGUAGE plpgsql;
    """)
    # create trigger for transaction
    op.execute("""
    CREATE TRIGGER trigger_transaction_audit
    AFTER INSERT OR UPDATE OR DELETE ON transaction
    FOR EACH ROW
    EXECUTE FUNCTION log_transaction_changes();
    """)
    # create trigger for accounttransaction
    op.execute("""
    CREATE TRIGGER trigger_account_transaction_audit
    AFTER INSERT OR UPDATE OR DELETE ON accounttransaction
    FOR EACH ROW
    EXECUTE FUNCTION log_transaction_changes();
    """)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('auditlog')
    op.execute("DROP TRIGGER IF EXISTS trigger_transaction_audit ON transaction;")
    op.execute("DROP TRIGGER IF EXISTS trigger_account_transaction_audit ON accounttransaction;")
    op.execute("DROP FUNCTION IF EXISTS log_transaction_changes();")
    # ### end Alembic commands ###

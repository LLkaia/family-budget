"""define structure

Revision ID: 1fa118300e1d
Revises:
Create Date: 2024-12-22 10:23:52.787950

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision: str = '1fa118300e1d'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('budget',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('balance', sa.Float(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('predefinedcategory',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('full_name', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('hashed_password', sqlmodel.sql.sqltypes.AutoString(length=60), nullable=False),
    sa.Column('telegram_id', sa.Integer(), nullable=True),
    sa.Column('is_superuser', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_email'), 'user', ['email'], unique=True)
    op.create_table('category',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('category_restriction', sa.Float(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('is_income', sa.Boolean(), nullable=False),
    sa.Column('budget_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['budget_id'], ['budget.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('budget_id', 'name', name='uq_budget_category')
    )
    op.create_table('stockaccount',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('balance', sa.Float(), nullable=False),
    sa.Column('account_name', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('userbudgetlink',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('budget_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['budget_id'], ['budget.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'budget_id')
    )
    op.create_table('stockposition',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('ticket_name', sqlmodel.sql.sqltypes.AutoString(length=10), nullable=False),
    sa.Column('count_active', sa.Integer(), nullable=False),
    sa.Column('date_opened', sa.Date(), nullable=False),
    sa.Column('account_id', sa.Integer(), nullable=False),
    sa.Column('price_per_stock_in', sa.Float(), nullable=False),
    sa.ForeignKeyConstraint(['account_id'], ['stockaccount.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('transaction',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('date_performed', sa.Date(), nullable=False),
    sa.Column('amount', sa.Float(), nullable=False),
    sa.Column('category_id', sa.Integer(), nullable=False),
    sa.Column('datetime_added', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['category_id'], ['category.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('accounttransaction',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('date_performed', sa.Date(), nullable=False),
    sa.Column('account_id', sa.Integer(), nullable=False),
    sa.Column('total_amount', sa.Float(), nullable=False),
    sa.Column('transaction_type', sa.Enum('DIVIDENDS', 'DEPOSIT', 'WITHDRAWAL', 'STOCK_IN', 'STOCK_OUT', name='accounttransactiontype'), nullable=False),
    sa.Column('paid_fee', sa.Float(), nullable=False),
    sa.Column('taxes_to_pay', sa.Float(), nullable=False),
    sa.Column('ticket_name', sqlmodel.sql.sqltypes.AutoString(length=10), nullable=False),
    sa.Column('price_per_item', sa.Float(), nullable=False),
    sa.Column('count_items', sa.Integer(), nullable=False),
    sa.Column('stock_position_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['account_id'], ['stockaccount.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['stock_position_id'], ['stockposition.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('accounttransaction')
    op.drop_table('transaction')
    op.drop_table('stockposition')
    op.drop_table('userbudgetlink')
    op.drop_table('stockaccount')
    op.drop_table('category')
    op.drop_index(op.f('ix_user_email'), table_name='user')
    op.drop_table('user')
    op.drop_table('predefinedcategory')
    op.drop_table('budget')
    # ### end Alembic commands ###
